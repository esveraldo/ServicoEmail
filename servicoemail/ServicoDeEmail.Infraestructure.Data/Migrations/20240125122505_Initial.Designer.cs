// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicoDeEmail.Infraestructure.Data.Contexts;

#nullable disable

namespace ServicoDeEmail.Infraestructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240125122505_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServicoDeEmail.Domain.Entities.ConsumerUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Consumer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsumerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceUsersId");

                    b.ToTable("ConsumerUsers");
                });

            modelBuilder.Entity("ServicoDeEmail.Domain.Entities.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessKey")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AttachmentsDocs")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvalidEmails")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Obs")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("ServicoDeEmail.Domain.Entities.ServiceUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("BIT");

                    b.Property<string>("NameUser")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Smtp")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ServiceUsers");
                });

            modelBuilder.Entity("ServicoDeEmail.Domain.Entities.ConsumerUsers", b =>
                {
                    b.HasOne("ServicoDeEmail.Domain.Entities.ServiceUsers", "ServiceUsers")
                        .WithMany("ConsumerUsers")
                        .HasForeignKey("ServiceUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceUsers");
                });

            modelBuilder.Entity("ServicoDeEmail.Domain.Entities.Email", b =>
                {
                    b.OwnsMany("ServicoDeEmail.Domain.Entities.Attachments", "Attachments", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Code")
                                .HasColumnType("text");

                            b1.Property<Guid>("EmailId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Extension")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("FileNameSend")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("Id");

                            b1.HasIndex("EmailId");

                            b1.ToTable("Attachments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EmailId");
                        });

                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("ServicoDeEmail.Domain.Entities.ServiceUsers", b =>
                {
                    b.Navigation("ConsumerUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
